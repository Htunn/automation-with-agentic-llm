#!/usr/bin/env python3

import os
import sys
import subprocess
from pathlib import Path

def main():
    print("Running pre-commit checks...")
    errors = []
    
    # Get the git staged files
    staged_files_process = subprocess.run(
        ["git", "diff", "--cached", "--name-only", "--diff-filter=ACMR"],
        capture_output=True, text=True
    )
    
    if staged_files_process.returncode != 0:
        print(f"Error getting staged files: {staged_files_process.stderr}")
        return 1
    
    staged_files = staged_files_process.stdout.splitlines()
    
    # Filter Python files
    python_files = [f for f in staged_files if f.endswith('.py')]
    
    if not python_files:
        print("No Python files to check.")
        return 0
    
    print(f"Checking {len(python_files)} Python files...")
    
    # Run black
    print("\n=== Running Black code formatter check ===")
    black_result = subprocess.run(
        ["black", "--check"] + python_files,
        capture_output=True, text=True
    )
    
    if black_result.returncode != 0:
        print(black_result.stderr)
        print(black_result.stdout)
        errors.append("Black formatting check failed. Run 'black .' to format your code.")
    else:
        print("Black: All files properly formatted.")
    
    # Run isort
    print("\n=== Running isort import sorting check ===")
    isort_result = subprocess.run(
        ["isort", "--check-only", "--profile", "black"] + python_files,
        capture_output=True, text=True
    )
    
    if isort_result.returncode != 0:
        print(isort_result.stderr)
        print(isort_result.stdout)
        errors.append("isort check failed. Run 'isort --profile black .' to sort your imports.")
    else:
        print("isort: All imports properly sorted.")
    
    # Run flake8
    print("\n=== Running flake8 linting check ===")
    flake8_result = subprocess.run(
        ["flake8"] + python_files,
        capture_output=True, text=True
    )
    
    if flake8_result.returncode != 0:
        print(flake8_result.stderr)
        print(flake8_result.stdout)
        errors.append("flake8 check failed. Fix the linting issues.")
    else:
        print("flake8: No linting issues found.")
    
    # Check for debug prints or pdb
    print("\n=== Checking for debug code ===")
    debug_patterns = [
        "pdb.set_trace()",
        "breakpoint()",
        "print(",  # Be cautious with this
        "import pdb",
        "# TODO",
    ]
    
    for file in python_files:
        with open(file, 'r', encoding='utf-8') as f:
            content = f.read()
            for pattern in debug_patterns:
                if pattern in content:
                    print(f"Found potential debug code '{pattern}' in {file}")
                    errors.append(f"Possible debug code in {file}. Remove before committing.")
                    break
    
    if not errors:
        print("\n✅ All checks passed!")
        return 0
    else:
        print("\n❌ Some checks failed:")
        for error in errors:
            print(f"  - {error}")
        return 1

if __name__ == "__main__":
    sys.exit(main())
